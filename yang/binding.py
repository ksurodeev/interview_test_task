# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal
from bitarray import bitarray
import six

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
  import builtins as __builtin__
  long = int
elif six.PY2:
  import __builtin__

class yc_character_repka__Fairytale_character(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module repka - based on the path /Fairytale/character. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_path_helper', '_extmethods', '__Name','__Age',)

  _yang_name = 'character'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__Name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="Name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='https://russian-fairytales.com/repka', defining_module='repka', yang_type='string', is_config=True)
    self.__Age = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="Age", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://russian-fairytales.com/repka', defining_module='repka', yang_type='age', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['Fairytale', 'character']

  def _get_Name(self):
    """
    Getter method for Name, mapped from YANG variable /Fairytale/character/Name (string)

    YANG Description: Character's name
    """
    return self.__Name
      
  def _set_Name(self, v, load=False):
    """
    Setter method for Name, mapped from YANG variable /Fairytale/character/Name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_Name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_Name() directly.

    YANG Description: Character's name
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="Name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='https://russian-fairytales.com/repka', defining_module='repka', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """Name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="Name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='https://russian-fairytales.com/repka', defining_module='repka', yang_type='string', is_config=True)""",
        })

    self.__Name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_Name(self):
    self.__Name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="Name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='https://russian-fairytales.com/repka', defining_module='repka', yang_type='string', is_config=True)


  def _get_Age(self):
    """
    Getter method for Age, mapped from YANG variable /Fairytale/character/Age (age)

    YANG Description: Character's age
    """
    return self.__Age
      
  def _set_Age(self, v, load=False):
    """
    Setter method for Age, mapped from YANG variable /Fairytale/character/Age (age)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_Age is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_Age() directly.

    YANG Description: Character's age
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="Age", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://russian-fairytales.com/repka', defining_module='repka', yang_type='age', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """Age must be of a type compatible with age""",
          'defined-type': "repka:age",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="Age", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://russian-fairytales.com/repka', defining_module='repka', yang_type='age', is_config=True)""",
        })

    self.__Age = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_Age(self):
    self.__Age = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': ['0..100']}), is_leaf=True, yang_name="Age", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://russian-fairytales.com/repka', defining_module='repka', yang_type='age', is_config=True)

  Name = __builtin__.property(_get_Name, _set_Name)
  Age = __builtin__.property(_get_Age, _set_Age)


  _pyangbind_elements = OrderedDict([('Name', Name), ('Age', Age), ])


class yc_vegetable_repka__Fairytale_vegetable(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module repka - based on the path /Fairytale/vegetable. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_path_helper', '_extmethods', '__Type','__Mass','__Size',)

  _yang_name = 'vegetable'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__Type = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="Type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='https://russian-fairytales.com/repka', defining_module='repka', yang_type='string', is_config=True)
    self.__Mass = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['0..500']}), is_leaf=True, yang_name="Mass", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://russian-fairytales.com/repka', defining_module='repka', yang_type='mass', is_config=True)
    self.__Size = YANGDynClass(base=six.text_type, default=six.text_type("bolshaya-prebolshaya"), is_leaf=True, yang_name="Size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://russian-fairytales.com/repka', defining_module='repka', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['Fairytale', 'vegetable']

  def _get_Type(self):
    """
    Getter method for Type, mapped from YANG variable /Fairytale/vegetable/Type (string)
    """
    return self.__Type
      
  def _set_Type(self, v, load=False):
    """
    Setter method for Type, mapped from YANG variable /Fairytale/vegetable/Type (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_Type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_Type() directly.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="Type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='https://russian-fairytales.com/repka', defining_module='repka', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """Type must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="Type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='https://russian-fairytales.com/repka', defining_module='repka', yang_type='string', is_config=True)""",
        })

    self.__Type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_Type(self):
    self.__Type = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="Type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='https://russian-fairytales.com/repka', defining_module='repka', yang_type='string', is_config=True)


  def _get_Mass(self):
    """
    Getter method for Mass, mapped from YANG variable /Fairytale/vegetable/Mass (mass)

    YANG Description: Mass of vegetable
    """
    return self.__Mass
      
  def _set_Mass(self, v, load=False):
    """
    Setter method for Mass, mapped from YANG variable /Fairytale/vegetable/Mass (mass)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_Mass is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_Mass() directly.

    YANG Description: Mass of vegetable
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['0..500']}), is_leaf=True, yang_name="Mass", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://russian-fairytales.com/repka', defining_module='repka', yang_type='mass', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """Mass must be of a type compatible with mass""",
          'defined-type': "repka:mass",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['0..500']}), is_leaf=True, yang_name="Mass", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://russian-fairytales.com/repka', defining_module='repka', yang_type='mass', is_config=True)""",
        })

    self.__Mass = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_Mass(self):
    self.__Mass = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': ['0..500']}), is_leaf=True, yang_name="Mass", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://russian-fairytales.com/repka', defining_module='repka', yang_type='mass', is_config=True)


  def _get_Size(self):
    """
    Getter method for Size, mapped from YANG variable /Fairytale/vegetable/Size (string)
    """
    return self.__Size
      
  def _set_Size(self, v, load=False):
    """
    Setter method for Size, mapped from YANG variable /Fairytale/vegetable/Size (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_Size is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_Size() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, default=six.text_type("bolshaya-prebolshaya"), is_leaf=True, yang_name="Size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://russian-fairytales.com/repka', defining_module='repka', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """Size must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, default=six.text_type("bolshaya-prebolshaya"), is_leaf=True, yang_name="Size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://russian-fairytales.com/repka', defining_module='repka', yang_type='string', is_config=True)""",
        })

    self.__Size = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_Size(self):
    self.__Size = YANGDynClass(base=six.text_type, default=six.text_type("bolshaya-prebolshaya"), is_leaf=True, yang_name="Size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='https://russian-fairytales.com/repka', defining_module='repka', yang_type='string', is_config=True)

  Type = __builtin__.property(_get_Type, _set_Type)
  Mass = __builtin__.property(_get_Mass, _set_Mass)
  Size = __builtin__.property(_get_Size, _set_Size)


  _pyangbind_elements = OrderedDict([('Type', Type), ('Mass', Mass), ('Size', Size), ])


class yc_Fairytale_repka__Fairytale(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module repka - based on the path /Fairytale. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_path_helper', '_extmethods', '__character','__vegetable',)

  _yang_name = 'Fairytale'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__character = YANGDynClass(base=YANGListType("Name",yc_character_repka__Fairytale_character, yang_name="character", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='Name', extensions=None), is_container='list', yang_name="character", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://russian-fairytales.com/repka', defining_module='repka', yang_type='list', is_config=True)
    self.__vegetable = YANGDynClass(base=YANGListType("Type",yc_vegetable_repka__Fairytale_vegetable, yang_name="vegetable", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='Type', extensions=None), is_container='list', yang_name="vegetable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://russian-fairytales.com/repka', defining_module='repka', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['Fairytale']

  def _get_character(self):
    """
    Getter method for character, mapped from YANG variable /Fairytale/character (list)
    """
    return self.__character
      
  def _set_character(self, v, load=False):
    """
    Setter method for character, mapped from YANG variable /Fairytale/character (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_character is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_character() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("Name",yc_character_repka__Fairytale_character, yang_name="character", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='Name', extensions=None), is_container='list', yang_name="character", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://russian-fairytales.com/repka', defining_module='repka', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """character must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("Name",yc_character_repka__Fairytale_character, yang_name="character", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='Name', extensions=None), is_container='list', yang_name="character", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://russian-fairytales.com/repka', defining_module='repka', yang_type='list', is_config=True)""",
        })

    self.__character = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_character(self):
    self.__character = YANGDynClass(base=YANGListType("Name",yc_character_repka__Fairytale_character, yang_name="character", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='Name', extensions=None), is_container='list', yang_name="character", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://russian-fairytales.com/repka', defining_module='repka', yang_type='list', is_config=True)


  def _get_vegetable(self):
    """
    Getter method for vegetable, mapped from YANG variable /Fairytale/vegetable (list)
    """
    return self.__vegetable
      
  def _set_vegetable(self, v, load=False):
    """
    Setter method for vegetable, mapped from YANG variable /Fairytale/vegetable (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vegetable is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vegetable() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("Type",yc_vegetable_repka__Fairytale_vegetable, yang_name="vegetable", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='Type', extensions=None), is_container='list', yang_name="vegetable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://russian-fairytales.com/repka', defining_module='repka', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vegetable must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("Type",yc_vegetable_repka__Fairytale_vegetable, yang_name="vegetable", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='Type', extensions=None), is_container='list', yang_name="vegetable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://russian-fairytales.com/repka', defining_module='repka', yang_type='list', is_config=True)""",
        })

    self.__vegetable = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vegetable(self):
    self.__vegetable = YANGDynClass(base=YANGListType("Type",yc_vegetable_repka__Fairytale_vegetable, yang_name="vegetable", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='Type', extensions=None), is_container='list', yang_name="vegetable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://russian-fairytales.com/repka', defining_module='repka', yang_type='list', is_config=True)

  character = __builtin__.property(_get_character, _set_character)
  vegetable = __builtin__.property(_get_vegetable, _set_vegetable)


  _pyangbind_elements = OrderedDict([('character', character), ('vegetable', vegetable), ])


class repka(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module repka - based on the path /repka. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This is module for testing purposes
  """
  __slots__ = ('_path_helper', '_extmethods', '__Fairytale',)

  _yang_name = 'repka'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__Fairytale = YANGDynClass(base=yc_Fairytale_repka__Fairytale, is_container='container', yang_name="Fairytale", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://russian-fairytales.com/repka', defining_module='repka', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return []

  def _get_Fairytale(self):
    """
    Getter method for Fairytale, mapped from YANG variable /Fairytale (container)
    """
    return self.__Fairytale
      
  def _set_Fairytale(self, v, load=False):
    """
    Setter method for Fairytale, mapped from YANG variable /Fairytale (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_Fairytale is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_Fairytale() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_Fairytale_repka__Fairytale, is_container='container', yang_name="Fairytale", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://russian-fairytales.com/repka', defining_module='repka', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """Fairytale must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_Fairytale_repka__Fairytale, is_container='container', yang_name="Fairytale", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://russian-fairytales.com/repka', defining_module='repka', yang_type='container', is_config=True)""",
        })

    self.__Fairytale = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_Fairytale(self):
    self.__Fairytale = YANGDynClass(base=yc_Fairytale_repka__Fairytale, is_container='container', yang_name="Fairytale", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='https://russian-fairytales.com/repka', defining_module='repka', yang_type='container', is_config=True)

  Fairytale = __builtin__.property(_get_Fairytale, _set_Fairytale)


  _pyangbind_elements = OrderedDict([('Fairytale', Fairytale), ])


